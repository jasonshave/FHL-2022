@using CallCenterDashboard.Models
@using Azure.Communication.CallingServer
@using Azure.Communication
@using CallCenterDashboard.Features.ActiveCalls
@using CallCenterDashboard.Features.CallingServer

@inherits FluxorComponent
@inject IDispatcher dispatcher
@inject ISnackbar snackbar

<MudTable Items="@CallData" Hover="true" Breakpoint="Breakpoint.Sm" T="CallData">
    <HeaderContent>
        <MudTh>From</MudTh>
        <MudTh>To</MudTh>
        <MudTh>Call Duration</MudTh>
        <MudTh>Connection ID</MudTh>
        <MudTh>Correlation ID</MudTh>
        <MudTh>Hang up</MudTh>
        <MudTh>Terminate</MudTh>
        <MudTh>Add</MudTh>
        <MudTh>Remove</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="From">@context.From</MudTd>
        <MudTd DataLabel="To">@context.To</MudTd>
        <MudTd DataLabel="Call Duration">@context.CallDuration</MudTd>
        <MudTd DataLabel="Connection ID">@context.ConnectionId</MudTd>
        <MudTd DataLabel="Correlation ID">@context.CorrelationId</MudTd>
        <MudTd>
            <HangUpButton CallData="context"/>
        </MudTd>
        <MudTd>
            <MudIconButton @onclick="async () => await Terminate.InvokeAsync(context)" Icon="@Icons.Material.Filled.GroupRemove"></MudIconButton>
        </MudTd>
        <MudTd>
            <MudIconButton @onclick="async () => await ProcessAddParticipant(context)" Icon="@Icons.Material.Filled.PersonAdd"></MudIconButton>
        </MudTd>
        <MudTd>
            <MudIconButton @onclick="async () => await ProcessRemoveParticipant(context)" Icon="@Icons.Material.Filled.PersonRemove"></MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {
    [Parameter] public IEnumerable<CallData> CallData { get; set; }
    [Parameter] public EventCallback<CallData> HangUp { get; set; }
    [Parameter] public EventCallback<CallData> Terminate { get; set; }
    [Parameter] public EventCallback<CommunicationIdentifier> UserToAdd { get; set; }
    [Parameter] public EventCallback<CommunicationIdentifier> UserToRemove { get; set; }

    protected override void OnInitialized()
    {
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;

        dispatcher.Dispatch(new ActiveCallsLoadDataAction());
        SubscribeToAction<CallingServerNotifyAction>(ToastIt);
        base.OnInitialized();
    }

    void ToastIt(CallingServerNotifyAction action)
    {
        snackbar.Add(action.NotificationData.Message, action.NotificationData.Severity, (options) => options.CloseAfterNavigation = true);
    }

    async ValueTask ProcessAddParticipant(CallData callData)
    {
        // todo: wire up modal
    }

    async ValueTask ProcessRemoveParticipant(CallData callData)
    {
        // todo: wire up modal
    }
}
