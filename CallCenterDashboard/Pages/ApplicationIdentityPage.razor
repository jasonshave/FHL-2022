@page "/identity"

@using CallingDashboard.Features.ApplicationIdentity

@inherits FluxorComponent
@inject IDispatcher dispatcher
@inject IState<ApplicationIdentityState> applicationIdentityState

<PageTitle>ACS - Application Identity</PageTitle>
<MudBreadcrumbs Items="_items"/>
<MudContainer>
    <MudGrid>
        <MudItem xs="12">
            <MudPaper Class="pa-4">
                <EditForm Model="model" OnValidSubmit="CreateAndSetApplicationId">
                    <DataAnnotationsValidator/>
                    <MudText Typo="Typo.h5">Application identity</MudText>
                    <MudText Typo="Typo.body2">
                        The Communication Services identity is used to perform certain actions within this application such as placing calls using the Call Automation SDK.
                        Once set, both the application name and identity are preserved until the web application is restarted.
                    </MudText>
                    <MudTextField ReadOnly="isRegistered" Label="Name" HelperText="Enter a name for this application." @bind-Value="model.Name" For="@(() => model.Name)" Adornment="@adornment" AdornmentIcon="@Icons.Material.Filled.CheckCircle" AdornmentColor="Color.Success"/>
                    <MudTextField Label="Identity" ReadOnly="true" HelperText="Click to request an identity." @bind-Value="rawId" Variant="Variant.Text" Adornment="@adornment" AdornmentIcon="@Icons.Material.Filled.CheckCircle" AdornmentColor="Color.Success"/>
                    <MudDivider/>
                    <MudButton Disabled="isRegistered" ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Tertiary" StartIcon="@Icons.Material.Filled.Create">
                        Register
                    </MudButton>
                </EditForm>
            </MudPaper>
        </MudItem>
        <MudItem xs="12">
            <CreateIdentity/>
        </MudItem>
    </MudGrid>

</MudContainer>

@code {
    readonly List<BreadcrumbItem> _items = new()
    {
        new BreadcrumbItem("Dashboard", href: "#"),
        new BreadcrumbItem("Application Identity", href: null, disabled: true)
    };

    readonly ApplicationIdentityFormData model = new();
    bool isRegistered;
    string? rawId;
    string? applicationName;
    Adornment adornment = Adornment.None;

    protected override void OnInitialized()
    {
        rawId = applicationIdentityState.Value.Id?.RawId;
        model.Name = applicationIdentityState.Value.ApplicationName;

        SubscribeToAction<ApplicationIdentitySetIdentityAction>(i =>
        {
            rawId = i.identity.RawId;
            isRegistered = true;
            adornment = Adornment.End;
        });
        SubscribeToAction<ApplicationIdentitySetNameAction>(i =>
        {
            model.Name = i.ApplicationName;
        });

        if (applicationIdentityState.Value.ApplicationName is not null)
        {
            adornment = Adornment.End;
            isRegistered = true;
        }

        StateHasChanged();
        base.OnInitialized();
    }

    void CreateAndSetApplicationId(EditContext context)
    {
        dispatcher.Dispatch(new ApplicationIdentitySetNameAction(model.Name));
    }
}
