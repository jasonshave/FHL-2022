@using Azure.Communication.JobRouter
@using Azure.Communication.JobRouter.Models
@using System.ComponentModel.Design.Serialization
@inject RouterClient routerClient

@if (loading)
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
}
else
{
    <MudTable Items="@items" Hover="true" Breakpoint="Breakpoint.Sm" T="RouterWorkerItem">
        <HeaderContent>
            <MudTh>Delete</MudTh>
            <MudTh>Worker Id</MudTh>
            <MudTh>Available</MudTh>
            <MudTh>State</MudTh>
            <MudTh>Queues</MudTh>
            <MudTh>Jobs</MudTh>
            <MudTh>Load Ratio</MudTh>
            <MudTh>Capacity</MudTh>
            <MudTh>Channels</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd><MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" ButtonType="ButtonType.Button" OnClick="@(() => DeleteWorker(context))"/></MudTd>
            <MudTd DataLabel="Id">@context.RouterWorker.Id</MudTd>
            <MudTd>
                @if (loadingAvailability)
                {
                    <MudProgressCircular Indeterminate="true" Color="Color.Secondary" Size="Size.Small"/>
                }
                else
                {
                    <MudSwitch T="bool?" Color="Color.Success" Checked="context.RouterWorker.AvailableForOffers" CheckedChanged="@(() => ChangeWorkerAvailability(context))"/>
                }
            </MudTd>
            <MudTd DataLabel="State">
                @if (context.RouterWorker.State.Value == RouterWorkerState.Active)
                {
                    <MudIcon Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success"/>
                }
                @if (context.RouterWorker.State.Value == RouterWorkerState.Draining)
                {
                    <MudIcon Icon="@Icons.Material.Filled.HourglassBottom" Color="Color.Warning"/>
                }
                @if (context.RouterWorker.State.Value == RouterWorkerState.Inactive)
                {
                    <MudIcon Icon="@Icons.Material.Filled.DoNotDisturbOn" Color="Color.Secondary"/>
                }
            </MudTd>
            <MudTd DataLabel="Queues">
                @foreach (var queueAssignment in context.RouterWorker.QueueAssignments)
                {
                    <MudText>@queueAssignment.Key</MudText>
                }
            </MudTd>

            <MudTd DataLabel="Jobs">
                @foreach (var assignJob in context.RouterWorker.AssignedJobs)
                {
                    <MudText>Assignment Id: @assignJob.Id</MudText>
                    <MudText>Assigned at: @assignJob.AssignTime</MudText>
                    <MudText>Job cost: @assignJob.CapacityCost</MudText>
                }
            </MudTd>
            <MudTd>@context.RouterWorker.LoadRatio</MudTd>
            <MudTd>@context.RouterWorker.TotalCapacity</MudTd>
            <MudTd DataLabel="Channels">
                @foreach (var channelConfiguration in context.RouterWorker.ChannelConfigurations)
                {
                    <MudText>@channelConfiguration.Key</MudText>
                }
            </MudTd>
        </RowTemplate>
</MudTable>
}

@code {
    List<RouterWorkerItem> items = new ();
    bool loading;
    bool loadingAvailability;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        await base.OnInitializedAsync();
    }

    async Task Refresh()
    {
        items.Clear();
        loading = true;
        var policyPages = routerClient.GetWorkersAsync();
        await foreach (var item in policyPages.AsPages())
        {
            items.AddRange(item.Values);
        }
        loading = false;
        StateHasChanged();
    }

    async Task ChangeWorkerAvailability(RouterWorkerItem worker)
    {
        loadingAvailability = true;
        await routerClient.UpdateWorkerAsync(new UpdateWorkerOptions(worker.RouterWorker.Id)
        {
            AvailableForOffers = !worker.RouterWorker.AvailableForOffers
        });
        loadingAvailability = false;
        await Refresh();
    }

    async Task DeleteWorker(RouterWorkerItem worker)
    {
        await routerClient.DeleteWorkerAsync(worker.RouterWorker.Id);
        await Refresh();
    }

}