@using CallCenterDashboard.Models
@using Azure.Communication.CallingServer
@using Azure.Communication
@using CallCenterDashboard.Features.ActiveCalls
@using CallCenterDashboard.Features.CallingServer
@using CallCenterDashboard.Misc

@inherits FluxorComponent
@inject IDispatcher dispatcher
@inject ISnackbar snackbar
@inject IState<ActiveCallsState> activeCallState
@inject IDialogService DialogService

<MudTable Items="@activeCallState.Value.CallData" Hover="true" Breakpoint="Breakpoint.Sm" T="CallData">
    <HeaderContent>
        <MudTh>From</MudTh>
        <MudTh>To</MudTh>
        <MudTh>Call Duration</MudTh>
        <MudTh>Connection ID</MudTh>
        <MudTh>Correlation ID</MudTh>
        <MudTh>Hang up</MudTh>
        <MudTh>Terminate</MudTh>
        <MudTh>Add</MudTh>
        <MudTh>Remove</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="From">@context.From</MudTd>
        <MudTd DataLabel="To">@context.To</MudTd>
        <MudTd DataLabel="Call Duration">@context.CallStartTime</MudTd>
        <MudTd DataLabel="Connection ID">@context.ConnectionId</MudTd>
        <MudTd DataLabel="Correlation ID">@context.CorrelationId</MudTd>
        <MudTd>
            <HangUpButton CallData="context"/>
        </MudTd>
        <MudTd>
            <TerminateButton CallData="context"/>
        </MudTd>
        <MudTd>
            <MudIconButton @onclick="async () => await AddParticipant(context)" Icon="@Icons.Material.Filled.PersonAdd"></MudIconButton>
        </MudTd>
        <MudTd>
            <MudIconButton @onclick="async () => await RemoveParticipant(context)" Icon="@Icons.Material.Filled.PersonRemove"></MudIconButton>
        </MudTd>
    </RowTemplate>
</MudTable>

@code {

    protected override void OnInitialized()
    {
        snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomStart;

        dispatcher.Dispatch(new ActiveCallsLoadDataAction());
        SubscribeToAction<CallingServerNotifyAction>(ToastIt);
        base.OnInitialized();
    }

    void ToastIt(CallingServerNotifyAction action)
    {
        snackbar.Add(action.NotificationData.Message, action.NotificationData.Severity, (options) =>
        {
            options.CloseAfterNavigation = true;
        });
    }

    async Task AddParticipant(CallData callData)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Type a participant to add");
        parameters.Add("ButtonText", "Add");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = DialogService.Show<ParticipantManagementModal>("Add participant", parameters, options);
        var result = await dialogResult.Result;

        if (!result.Cancelled)
        {
            var output = result.Data as ParticipantManagementModalResponse;
            dispatcher.Dispatch(new CallingServerAddParticipantAction(callData, output.UserType.Convert(output.Id)));
        }
    }

    async Task RemoveParticipant(CallData callData)
    {
        var parameters = new DialogParameters();
        parameters.Add("ContentText", "Type a participant to remove");
        parameters.Add("ButtonText", "Remove");
        parameters.Add("Color", Color.Success);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialogResult = DialogService.Show<ParticipantManagementModal>("Remove participant", parameters, options);
        var result = await dialogResult.Result;

        if (!result.Cancelled)
        {
            var output = result.Data as ParticipantManagementModalResponse;
            dispatcher.Dispatch(new CallingServerRemoveParticipantAction(callData, output.UserType.Convert(output.Id)));
        }
    }
}
