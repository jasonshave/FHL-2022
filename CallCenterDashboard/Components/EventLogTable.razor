@using CallCenterDashboard.Features.EventLog
@inherits FluxorComponent
@inject IState<EventLogState> eventLogState
@inject IJSRuntime JS

<MudContainer>
    <MudTable Items="@eventLogState.Value.EventLogData" Dense="true" Filter="new Func<EventLogData,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" Hover="true" FixedHeader="@fixed_header" FixedFooter="@fixed_footer" Height="@(fixed_header || fixed_footer ?"600px":"")">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Event history</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="searchString1" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Event</MudTh>
            <MudTh><MudTableSortLabel Enabled="true" InitialDirection="SortDirection.Descending" SortBy="new Func<EventLogData, object>(x => x.EventDateTime)">Date</MudTableSortLabel></MudTh>
            <MudTh>Connection</MudTh>
            <MudTh>Correlation</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Event">@context.EventName</MudTd>
            <MudTd DataLabel="Date">@context.EventDateTime.LocalDateTime</MudTd>
            <MudTd DataLabel="">@context.CallConnectionId</MudTd>
            <MudTd DataLabel="CorrelationId" ><button @onclick="@(e => NewTabToCfv(@context.CorrelationId))">@context.CorrelationId</button></MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager PageSizeOptions="new []{50, 100}" />
        </PagerContent>
    </MudTable>
</MudContainer>


@code {
    bool fixed_header = true;
    bool fixed_footer = false;
    private string searchString1 = "";
    private EventLogData selectedItem1 = null;

    private bool FilterFunc1(EventLogData data) => FilterFunc(data, searchString1);

    private bool FilterFunc(EventLogData data, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (data.EventName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (data.CorrelationId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (data.CallConnectionId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task NewTabToCfv(string? correlationId)
    {
        if (correlationId != null)
        {
            string[] parameters = { $"https://ngc.skype.net/call/{correlationId}", "_blank" };
            await JS.InvokeVoidAsync("open", parameters);
        }
    }
}
